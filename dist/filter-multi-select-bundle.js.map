{"version":3,"file":"filter-multi-select-bundle.js","sources":["../src/FilterMultiSelect.ts","../src/filter-multi-select.ts"],"sourcesContent":["/*! \n *  Multiple select dropdown with filter jQuery plugin.\n *  Copyright (C) 2022  Andrew Wagner  github.com/andreww1011\n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n * \n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n * \n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, write to the Free Software\n *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301\n *  USA\n */\nimport $, { map } from 'jquery';\n\nconst NULL_OPTION = new class implements Option {\n    public initialize(): void {}\n    public select(): void {}\n    public deselect(): void {}\n    public enable(): void {}\n    public disable(): void {}\n    public isSelected(): boolean {return false;}\n    public isDisabled(): boolean {return false;}\n    public getListItem(): HTMLElement {return document.createElement('div');}\n    public getSelectedItemBadge(): HTMLElement {return document.createElement('div');}\n    public getLabel(): string {return 'NULL_OPTION'}\n    public getValue(): string {return 'NULL_OPTION'}\n    public show(): void {}\n    public hide(): void {}\n    public isHidden(): boolean {return false;}\n    public focus(): void {}\n}  \n\ninterface Option {\n    initialize(): void;\n    select(): void;\n    deselect(): void;\n    enable(): void;\n    disable(): void;\n    isSelected(): boolean;\n    isDisabled(): boolean;\n    getListItem(): HTMLElement;\n    getSelectedItemBadge(): HTMLElement;\n    getLabel(): string;\n    getValue(): string;\n    show(): void;\n    hide(): void;\n    isHidden(): boolean;\n    focus(): void;\n}\n\nconst DEBUG = false;\n\nexport default class FilterMultiSelect {\n\n    private static SingleOption = class implements Option {\n        protected div: HTMLDivElement;\n        protected checkbox: HTMLInputElement;\n        protected labelFor: HTMLLabelElement;\n        protected closeButton: HTMLButtonElement;\n        protected selectedItemBadge: HTMLSpanElement;\n        protected fms: FilterMultiSelect;\n    \n        constructor(fms: FilterMultiSelect, row: number, name:string, label: string, value: string, checked: boolean, disabled: boolean) {\n            this.fms = fms;\n            this.div = document.createElement('div');\n            this.checkbox = document.createElement('input');\n            this.checkbox.type = 'checkbox';\n            let id: string = name + '-' + row.toString();\n            let nchbx: string = id + '-chbx';\n            this.checkbox.id = nchbx;\n            this.checkbox.name = name;\n            this.checkbox.value = value;\n            this.checkbox.checked = checked;\n            this.checkbox.disabled = disabled;\n            this.labelFor = document.createElement('label');\n            this.labelFor.htmlFor = nchbx;\n            this.labelFor.textContent = label;\n            this.div.append(this.checkbox, this.labelFor);\n            this.closeButton = document.createElement('button');\n            this.closeButton.type = 'button';\n            this.closeButton.innerHTML = '&times;';\n            this.selectedItemBadge = document.createElement('span');\n            this.selectedItemBadge.setAttribute('data-id',id);\n            this.selectedItemBadge.textContent = label;\n            this.selectedItemBadge.append(this.closeButton);\n        }\n    \n        private log(m: string, e: Event):void {\n            if (DEBUG) {\n                console.log(e.timeStamp + \" - \" + m + \":\" + e.type + \":\" + e.target)\n            }\n        }\n    \n        public initialize(): void {\n            this.div.className = 'dropdown-item custom-control';\n            this.checkbox.className = 'custom-control-input custom-checkbox';\n            this.labelFor.className = 'custom-control-label';\n            this.selectedItemBadge.className = 'item';\n            if (this.isSelected()) {\n                this.selectNoDisabledCheck();\n            }\n            if (this.isDisabled()) {\n                this.disableNoPermissionCheck();\n            }\n            this.checkbox.addEventListener('change', (e: Event) => {\n                e.stopPropagation();\n                if (this.isDisabled() || this.fms.isDisabled()) {\n                    e.preventDefault();\n                    return;\n                }\n                if (DEBUG) {\n                    this.log('checkbox',e);\n                }\n                \n                if (this.isSelected()) {\n                    this.select();\n                } else {\n                    this.deselect();\n                }\n                let numShown = this.fms.showing.length;\n                if (numShown === 1) {\n                    this.fms.clearFilterAndRefocus();\n                }\n            }, true);\n            this.checkbox.addEventListener('keyup', (e: KeyboardEvent) => {\n                if (DEBUG) {\n                    this.log('checkbox',e);\n                }\n                switch (e.key) {\n                    case \"Enter\":\n                        e.stopPropagation();\n                        this.checkbox.dispatchEvent(new MouseEvent('click'));\n                        break;\n                    default:\n                        break;\n                }\n            }, true)\n            this.closeButton.addEventListener('click', (e: Event) => {\n                e.stopPropagation();\n                if (this.isDisabled() || this.fms.isDisabled()) return;\n                if (DEBUG) {\n                    this.log('closeButton',e);\n                }\n                this.deselect();\n                if (!this.fms.isClosed()) {\n                    this.fms.refocusFilter();\n                }\n            }, true);\n            this.checkbox.tabIndex = -1;\n            this.closeButton.tabIndex = -1;\n        }\n    \n        public select(): void {\n            if (this.isDisabled()) return;\n            this.selectNoDisabledCheck();\n        }\n\n        private selectNoDisabledCheck(): void {\n            this.checkbox.checked = true;\n            this.fms.queueOption(this);\n            this.fms.dispatchSelectedEvent(this);\n            this.fms.update();\n        }\n    \n        public deselect(): void {\n            if (this.isDisabled()) return;\n            this.checkbox.checked = false;\n            this.fms.unqueueOption(this);\n            this.fms.dispatchDeselectedEvent(this);\n            this.fms.update();\n        }\n    \n        public enable(): void {\n            if (!this.fms.isEnablingAndDisablingPermitted()) return;\n            this.checkbox.disabled = false;\n            this.selectedItemBadge.classList.remove('disabled');\n            this.fms.update();\n        }\n    \n        public disable(): void {\n            if (!this.fms.isEnablingAndDisablingPermitted()) return;\n            this.disableNoPermissionCheck();\n        }\n\n        private disableNoPermissionCheck(): void {\n            this.checkbox.disabled = true;\n            this.selectedItemBadge.classList.add('disabled');\n            this.fms.update();\n        }\n    \n        public isSelected(): boolean {\n            return this.checkbox.checked;\n        }\n    \n        public isDisabled(): boolean {\n            return this.checkbox.disabled;\n        }\n    \n        public getListItem(): HTMLElement {\n            return this.div;\n        }\n    \n        public getSelectedItemBadge(): HTMLElement {\n            return this.selectedItemBadge;\n        }\n    \n        public getLabel(): string {\n            return this.labelFor.textContent;\n        }\n    \n        public getValue(): string {\n            return this.checkbox.value;\n        }\n    \n        public show(): void {\n            this.div.hidden = false;\n        }\n    \n        public hide(): void {\n            this.div.hidden = true;\n        }\n    \n        public isHidden(): boolean {\n            return this.div.hidden;\n        }\n\n        public focus(): void {\n            this.labelFor.focus();\n        }\n    }\n\n    private static createOptions(fms: FilterMultiSelect, name: string, htmlOptions: Array<HTMLOptionElement>, jsOptions: Array<[label:string, value:string, selected?:boolean, disabled?:boolean]>): Array<Option> {\n        let htmloptions =  htmlOptions.map((o, i) => {\n            FilterMultiSelect.checkValue(o.value, o.label);\n            return new FilterMultiSelect.SingleOption(fms, i, name, o.label, o.value, o.defaultSelected, o.disabled);\n        });\n        let j = htmlOptions.length;\n        let jsoptions = jsOptions.map((o, i) => {\n            let label: string = o[0];\n            let value: string = o[1];\n            let selected: boolean = o[2];\n            let disabled: boolean = o[3];\n            FilterMultiSelect.checkValue(value, label);\n            return new FilterMultiSelect.SingleOption(fms, j+i, name, label, value, selected, disabled);\n\n        });\n        let opts = htmloptions.concat(jsoptions);\n        let counts: any = {};\n        opts.forEach((o) => {\n            let v: string = o.getValue();\n            if (counts[v] === undefined) {\n                counts[v] = 1;\n            } else {\n                throw new Error(\"Duplicate value: \" + o.getValue() + \" (\" + o.getLabel() + \")\");\n            }\n        });\n        return opts;\n    }\n\n    private static checkValue(value:string, label:string):void {\n        if (value === \"\") {\n            throw new Error(\"Option \" + label + \" does not have an associated value.\");\n        }\n    }\n\n    private static createSelectAllOption(fms: FilterMultiSelect, name: string, label: string) {\n        return new class extends FilterMultiSelect.SingleOption {\n            constructor() {\n                super(fms,-1,name,label,'',false,false); //magic number\n                this.checkbox.indeterminate = false;\n            }\n\n            markSelectAll(): void {\n                this.checkbox.checked = true;\n                this.checkbox.indeterminate = false;\n            }\n\n            markSelectPartial(): void {\n                this.checkbox.checked = false;\n                this.checkbox.indeterminate = true;\n            }\n\n            markSelectAllNotDisabled(): void {\n                this.checkbox.checked = true;\n                this.checkbox.indeterminate = true;\n            }\n\n            markDeselect(): void {\n                this.checkbox.checked = false;\n                this.checkbox.indeterminate = false;\n            }\n\n            public select(): void {\n                if (this.isDisabled()) return;\n                this.fms.options.filter((o) => !o.isSelected())\n                    .forEach((o) => o.select());\n            }\n        \n            public deselect(): void {\n                if (this.isDisabled()) return;\n                this.fms.options.filter((o) => o.isSelected())\n                    .forEach((o) => o.deselect());\n            }\n\n            public enable(): void {\n                this.checkbox.disabled = false;\n            }\n        \n            public disable(): void {\n                this.checkbox.disabled = true;\n            }\n        } ();\n    }\n\n    public static EventType = {\n        SELECTED: \"optionselected\",\n        DESELECTED: \"optiondeselected\",\n    } as const;\n\n    private static createEvent(e: string, n: string, v: string, l: string): CustomEvent {\n        const event = new CustomEvent(e, {\n            detail: {\n                name: n,\n                value: v,\n                label: l\n            },\n            bubbles: true,\n            cancelable: true,\n            composed: false,\n        });\n        return event;\n    }\n\n    private options: Array<Option>;\n    private selectAllOption;\n    private div: HTMLDivElement;\n    private viewBar: HTMLDivElement;\n    private placeholder: HTMLSpanElement;\n    private selectedItems: HTMLSpanElement;\n    private dropDown: HTMLDivElement;\n    private filter: HTMLDivElement;\n    private filterInput: HTMLInputElement;\n    private clearButton: HTMLButtonElement;\n    private items: HTMLDivElement;\n    private caseSensitive: boolean;\n    private disabled: boolean;\n    private allowEnablingAndDisabling: boolean;\n    private filterText: string;\n    private showing: Array<number>;\n    private focusable: Array<number>;\n    private itemFocus: number;\n    private name: string;\n    private label: HTMLSpanElement;\n\n    constructor (selectTarget: JQuery<HTMLElement>, args: Args) {        \n        let t = selectTarget.get(0);\n        if (!(t instanceof HTMLSelectElement)) {\n            throw new Error(\"JQuery target must be a select element.\");\n        }\n        let select: HTMLSelectElement = t;\n        let multiple: boolean = select.multiple;\n        if (!multiple) {\n            throw new Error(\"Select element must have the \\\"multiple\\\" attribute.\")\n        }\n        let name: string = select.name;\n        if (!name) {\n            throw new Error(\"Select element must have a name attribute.\");\n        }\n        this.name = name;\n        let array: Array<HTMLOptionElement> = selectTarget.find('option').toArray();\n        this.options = FilterMultiSelect.createOptions(this, name, array, args.items);\n        this.selectAllOption = FilterMultiSelect.createSelectAllOption(this, name, args.selectAllText);\n\n        // filter box\n        this.filterInput = document.createElement('input');\n        this.filterInput.type = 'text';\n        this.filterInput.placeholder = args.filterText;\n        this.clearButton = document.createElement('button');\n        this.clearButton.type = 'button';\n        this.clearButton.innerHTML = '&times;';\n        this.filter = document.createElement('div');\n        this.filter.append(this.filterInput, this.clearButton);\n        \n        // items\n        this.items = document.createElement('div');\n        this.items.append(this.selectAllOption.getListItem());\n        this.options.forEach((o: Option) => this.items.append(o.getListItem()));\n\n        // dropdown list\n        this.dropDown = document.createElement('div');\n        this.dropDown.append(this.filter, this.items);\n\n        // placeholder\n        this.placeholder = document.createElement('span');\n        this.placeholder.textContent = args.placeholderText;\n        this.selectedItems = document.createElement('span');\n\n        // label\n        this.label = document.createElement('span');\n        this.label.textContent = args.labelText;\n        let customLabel:boolean = args.labelText.length != 0;\n        if (!customLabel) {\n            this.label.hidden = true;\n        }\n\n        // viewbar\n        this.viewBar = document.createElement('div');\n        this.viewBar.append(this.label, this.placeholder, this.selectedItems);\n\n        this.div = document.createElement('div');\n        this.div.id = select.id;\n        this.div.append(this.viewBar, this.dropDown);\n\n        this.caseSensitive = args.caseSensitive;\n        this.disabled = select.disabled;\n        this.allowEnablingAndDisabling = args.allowEnablingAndDisabling;\n        this.filterText = '';\n        this.showing = new Array<number>();\n        this.focusable = new Array<number>();\n        this.itemFocus = -2; //magic number\n\n        this.initialize();\n    }\n\n    private initialize(): void {\n        this.options.forEach(o => o.initialize());\n        this.selectAllOption.initialize();\n        \n        this.filterInput.className = 'form-control';\n        this.clearButton.tabIndex = -1;\n\n        this.filter.className = 'filter dropdown-item'\n        this.items.className = 'items dropdown-item';\n        this.dropDown.className = 'dropdown-menu';\n\n        this.placeholder.className = 'placeholder';\n        this.selectedItems.className = 'selected-items';\n        this.viewBar.className = 'viewbar form-control dropdown-toggle';\n        this.label.className = 'col-form-label mr-2 text-dark';\n\n        this.div.className = 'filter-multi-select dropdown';\n\n        if (this.isDisabled()) {\n            this.disableNoPermissionCheck();\n        }\n\n        this.attachDropdownListeners();\n        this.attachViewbarListeners();\n        this.closeDropdown();\n    }\n\n    private log(m: string, e: Event):void {\n        if (DEBUG) {\n            console.log(e.timeStamp + \" - \" + m + \":\" + e.type + \":\" + e.target);\n        }\n    }\n\n    private attachDropdownListeners(): void {\n        this.filterInput.addEventListener('keyup',(e: KeyboardEvent) => {\n            if (DEBUG) {\n                this.log('filterInput',e);\n            }\n            e.stopImmediatePropagation();\n            this.updateDropdownList();\n            let numShown = this.showing.length;\n            switch(e.key) {\n                case \"Enter\":\n                    if (numShown === 1) {\n                        let o: Option = this.options[this.showing[0]]; //magic number\n                        if (!o.isDisabled()) {\n                            if (o.isSelected()) {\n                                o.deselect();\n                            } else {\n                                o.select();\n                            }\n                            this.clearFilterAndRefocus();\n                        }\n                    }\n                    break;\n                case \"Escape\":\n                    if (this.filterText.length > 0) {\n                        this.clearFilterAndRefocus();\n                    } else {\n                        this.closeDropdown();\n                    }\n                    break;\n                default:\n                    break;\n            }   \n        }, true);\n        this.clearButton.addEventListener('click', (e: MouseEvent) => {\n            if (DEBUG) {\n                this.log('clearButton',e);\n            }\n            e.stopImmediatePropagation();\n            let text = this.filterInput.value;\n            if (text.length > 0) {\n                this.clearFilterAndRefocus();\n            } else {\n                this.closeDropdown();\n            }\n        }, true);\n    }\n\n    private updateDropdownList(): void {\n        let text = this.filterInput.value;\n        if (text.length > 0) {\n            this.selectAllOption.hide();\n        } else {\n            this.selectAllOption.show();\n        }\n        let showing = new Array<number>();\n        let focusable = new Array<number>();\n        if (this.caseSensitive) {\n            this.options.forEach((o: Option, i: number) => {\n                if (o.getLabel().indexOf(text) !== -1) { //magic number\n                    o.show();\n                    showing.push(i);\n                    if (!o.isDisabled()) {\n                        focusable.push(i);\n                    }\n                } else {\n                    o.hide();\n                }\n            });\n        } else {\n            this.options.forEach((o: Option, i: number) => {\n                if (o.getLabel().toLowerCase().indexOf(text.toLowerCase()) !== -1 ) { //magic number \n                    o.show();\n                    showing.push(i);\n                    if (!o.isDisabled()) {\n                        focusable.push(i);\n                    }\n                } else {\n                    o.hide();\n                }\n            });\n        }\n        this.filterText = text;\n        this.showing = showing;\n        this.focusable = focusable;\n    }\n\n    private clearFilterAndRefocus(): void {\n        if (DEBUG) {\n            console.log('clear filter');\n        }\n        this.filterInput.value = '';\n        this.updateDropdownList();\n        this.refocusFilter();\n    }\n\n    private refocusFilter() {\n        if (DEBUG) {\n            console.log('refocus filter');\n        }\n        this.filterInput.focus();\n        this.itemFocus = -2; //magic number\n    }\n\n    private attachViewbarListeners(): void {\n        this.viewBar.addEventListener('click',(e) => {\n            if (DEBUG) {\n                this.log('viewBar',e);\n            }\n            if (this.isClosed()) {\n                this.openDropdown();\n            } else {\n                this.closeDropdown();\n            }\n        });\n    }\n\n    public isClosed(): boolean {\n        return !this.dropDown.classList.contains('show');\n    }\n\n    private setTabIndex(): void {\n        if (this.isDisabled()) {\n            this.div.tabIndex = -1;\n        } else {\n            if (this.isClosed()) {\n                this.div.tabIndex = 0;\n            } else {\n                this.div.tabIndex = -1;\n            }\n        }\n    }\n\n    private closeDropdown(): void {\n        if (DEBUG) {\n            console.log('close');\n        }\n        document.removeEventListener('keydown', this.documentKeydownListener, true);\n        document.removeEventListener('click', this.documentClickListener, true);\n        this.dropDown.classList.remove('show');\n        setTimeout(() => {\n            this.setTabIndex();    \n        }, 100); //magic number\n        this.div.addEventListener('mousedown', this.fmsMousedownListener, true);\n        this.div.addEventListener('focus', this.fmsFocusListener);\n    }\n\n    private documentKeydownListener = (e: KeyboardEvent) => {\n        if (DEBUG) {\n            this.log('document',e);\n            console.log(e.key);\n        }\n        switch(e.key) {\n            case \"Tab\":\n                e.stopPropagation();\n                this.closeDropdown();\n                break;\n            case \"ArrowUp\":\n                e.stopPropagation();\n                e.preventDefault();\n                if (DEBUG) {\n                    console.log(\"up\");\n                }\n                this.decrementItemFocus();\n                this.focusItem();\n                break;\n            case \"ArrowDown\":\n                e.stopPropagation();\n                e.preventDefault();\n                if (DEBUG) {\n                    console.log(\"down\");\n                }\n                this.incrementItemFocus();\n                this.focusItem();\n                break;\n            case \"Enter\":\n            case \"Spacebar\":\n            case \" \":\n                //swallow to allow checkbox change to work\n                break;\n            default:\n                //send key to filter\n                this.refocusFilter();\n                break;\n        }\n    };\n\n    private incrementItemFocus(): void {\n        if (this.itemFocus >= this.focusable.length - 1 || this.focusable.length == 0) return;\n        this.itemFocus++;\n        if (this.itemFocus == -1 && this.selectAllOption.isHidden()) { //magic number\n            this.itemFocus++;\n        }\n    }\n\n    private decrementItemFocus(): void {\n        if (this.itemFocus <= -2) return; //magic number\n        this.itemFocus--;\n        if (this.itemFocus == -1 && this.selectAllOption.isHidden()) { //magic number\n            this.itemFocus--;\n        }\n    }\n\n    private focusItem(): void {\n        if (this.itemFocus === -2) {\n            this.refocusFilter();\n        } else if (this.itemFocus === -1) {\n            this.selectAllOption.focus();\n        } else {\n            this.options[this.focusable[this.itemFocus]].focus();\n        }\n    }\n\n    private documentClickListener = (e: MouseEvent) => {\n        if (DEBUG) {\n            this.log('document',e);\n        }\n        if (this.div !== e.target && !this.div.contains(<Node>e.target)) {\n            this.closeDropdown();\n        }\n    };\n\n    private fmsFocusListener: EventListener = (e: FocusEvent) => {\n        if (DEBUG) {\n            this.log('div',e);\n        }\n        e.stopPropagation();\n        e.preventDefault();\n        this.viewBar.dispatchEvent(new MouseEvent('click'));\n    };\n\n    private fmsMousedownListener: EventListener = (e: MouseEvent) => {\n        if (DEBUG) {\n            this.log('div',e);\n        }\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    private openDropdown() {\n        if (this.disabled) return;\n        if (DEBUG) {\n            console.log('open');\n        }\n        this.div.removeEventListener('mousedown', this.fmsMousedownListener, true);\n        this.div.removeEventListener('focus', this.fmsFocusListener);\n        this.dropDown.classList.add('show');\n        this.setTabIndex();\n        this.clearFilterAndRefocus();\n        document.addEventListener('keydown', this.documentKeydownListener, true);\n        document.addEventListener('click', this.documentClickListener, true);\n    }\n\n    private queueOption(option: Option): void {\n        if (this.options.indexOf(option) == -1) return;\n        $(this.selectedItems).append(option.getSelectedItemBadge());\n    }\n\n    private unqueueOption(option: Option): void {\n        if (this.options.indexOf(option) == -1) return;\n        $(this.selectedItems).children('[data-id=\"' + option.getSelectedItemBadge().getAttribute('data-id') + '\"]').remove();\n    }\n\n    private update(): void {\n        if (this.areAllSelected()) {\n            this.selectAllOption.markSelectAll();\n            this.placeholder.hidden = true;\n        } else if (this.areSomeSelected()) {\n            if (this.areOnlyDeselectedAlsoDisabled()) {\n                this.selectAllOption.markSelectAllNotDisabled();\n                this.placeholder.hidden = true;\n            } else {\n                this.selectAllOption.markSelectPartial();\n                this.placeholder.hidden = true;\n            }\n        } else {\n            this.selectAllOption.markDeselect();\n            this.placeholder.hidden = false;\n        }\n        if (this.areAllDisabled()) {\n            this.selectAllOption.disable();\n        } else {\n            this.selectAllOption.enable();\n        }\n    }\n\n    private areAllSelected(): boolean {\n        return this.options\n                .map((o) => o.isSelected())\n                .reduce((acc,cur) => acc && cur, true);\n    }\n\n    private areSomeSelected(): boolean {\n        return this.options\n                .map((o) => o.isSelected())\n                .reduce((acc,cur) => acc || cur, false);\n    }\n\n    private areOnlyDeselectedAlsoDisabled(): boolean {\n        return this.options\n                .filter((o) => !o.isSelected())\n                .map((o) => o.isDisabled())\n                .reduce((acc,cur) => acc && cur, true);\n    }\n\n    private areAllDisabled(): boolean {\n        return this.options\n                .map((o) => o.isDisabled())\n                .reduce((acc,cur) => acc && cur, true);\n    }\n\n    private isEnablingAndDisablingPermitted(): boolean {\n        return this.allowEnablingAndDisabling;\n    }\n\n    public getRootElement(): HTMLElement {\n        return this.div;\n    }\n\n    public hasOption(value: string): boolean {\n        return this.getOption(value) !== NULL_OPTION;\n    }\n\n    private getOption(value: string): Option {\n        for (const o of this.options) {\n            if (o.getValue() == value) {\n                return o;\n            }\n        }\n        return NULL_OPTION;\n    }\n\n    public selectOption(value: string): void {\n        this.getOption(value).select();\n    }\n\n    public deselectOption(value: string): void {\n        this.getOption(value).deselect();\n    }\n\n    public isOptionSelected(value: string): boolean {\n        return this.getOption(value).isSelected();\n    }\n\n    public enableOption(value: string): void {\n        this.getOption(value).enable();\n    }\n\n    public disableOption(value: string): void {\n        this.getOption(value).disable();\n    }\n\n    public isOptionDisabled(value: string): boolean {\n        return this.getOption(value).isDisabled();\n    }\n\n    public disable(): void {\n        if (!this.isEnablingAndDisablingPermitted()) return;\n        this.disableNoPermissionCheck();\n    }\n\n    private disableNoPermissionCheck(): void {\n        this.options.forEach((o) => this.setBadgeDisabled(o));\n        this.disabled = true;\n        this.div.classList.add('disabled');\n        this.viewBar.classList.remove('dropdown-toggle');\n        this.closeDropdown();\n    }\n\n    private setBadgeDisabled(o: Option):void {\n        o.getSelectedItemBadge().classList.add('disabled');\n    }\n\n    public enable(): void {\n        if (!this.isEnablingAndDisablingPermitted()) return;\n        this.options.forEach((o) => {\n            if (!o.isDisabled()) {\n                this.setBadgeEnabled(o);\n            }\n        });\n        this.disabled = false;\n        this.div.classList.remove('disabled');\n        this.setTabIndex(); \n        this.viewBar.classList.add('dropdown-toggle');\n    }\n\n    private setBadgeEnabled(o: Option):void {\n        o.getSelectedItemBadge().classList.remove('disabled');\n    }\n\n    public isDisabled(): boolean {\n        return this.disabled;\n    }\n\n    public selectAll(): void {\n        this.selectAllOption.select();\n    }\n\n    public deselectAll(): void {\n        this.selectAllOption.deselect();\n    }\n\n    private getSelectedOptions(includeDisabled = true): Array<Option> {\n        let a = this.options;\n        if (!includeDisabled) {\n            if (this.isDisabled()) {\n                return new Array();\n            }\n            a = a.filter((o) => !o.isDisabled());\n        }\n        a = a.filter((o) => o.isSelected());\n        return a;\n    }\n\n    public getSelectedOptionsAsJson(includeDisabled = true): string {\n        const data: any = {};\n        let a: Array<string> = this.getSelectedOptions(includeDisabled).map((o) => o.getValue());\n        data[this.getName()] = a;\n        let c = JSON.stringify(data, null, \"  \");\n        if (DEBUG) {\n            console.log(c);\n        }\n        return c;\n    }\n\n    public getName(): string {\n        return this.name;\n    }\n\n    private dispatchSelectedEvent(option: Option): void {\n        this.dispatchEvent(\n            FilterMultiSelect.EventType.SELECTED,\n            option.getValue(),\n            option.getLabel());\n    }\n\n    private dispatchDeselectedEvent(option: Option): void {\n        this.dispatchEvent(\n            FilterMultiSelect.EventType.DESELECTED,\n            option.getValue(),\n            option.getLabel());\n    }\n\n    private dispatchEvent(eventType: string, value: string, label: string): void {\n        let event: CustomEvent = FilterMultiSelect.createEvent(eventType, this.getName(), value, label);\n        this.viewBar.dispatchEvent(event);\n    }\n}","/*! \n *  Multiple select dropdown with filter jQuery plugin.\n *  Copyright (C) 2022  Andrew Wagner  github.com/andreww1011\n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n * \n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n * \n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, write to the Free Software\n *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301\n *  USA\n */\nimport $ from 'jquery';\nimport FilterMultiSelect from './FilterMultiSelect';\n\n// define the plugin function on the jQuery extension point.\n($.fn as any).filterMultiSelect = function (this: JQuery, args: Args): any {\n    let target = this;\n    // merge the global options with the per-call options.\n    args = $.extend({}, ($.fn as any).filterMultiSelect.args, args);\n\n    // factory defaults\n    if (typeof args.placeholderText === 'undefined') args.placeholderText = 'nothing selected';\n    if (typeof args.filterText === 'undefined') args.filterText = 'Filter';\n    if (typeof args.selectAllText === 'undefined') args.selectAllText = 'Select All';\n    if (typeof args.labelText === 'undefined') args.labelText = '';\n    if (typeof args.caseSensitive === 'undefined') args.caseSensitive = false;\n    if (typeof args.allowEnablingAndDisabling === 'undefined') args.allowEnablingAndDisabling = true;\n    if (typeof args.items === 'undefined') args.items = new Array();\n    \n\n    let filterMultiSelect = new FilterMultiSelect(target, args);\n  \n    const fms = $(filterMultiSelect.getRootElement());\n    target.replaceWith(fms);\n    \n    var methods = {\n        hasOption: function(value: string):boolean {\n            return filterMultiSelect.hasOption(value);\n        },\n        selectOption: function(value: string):void {\n            filterMultiSelect.selectOption(value);\n        },\n        deselectOption: function(value: string):void {\n            filterMultiSelect.deselectOption(value);\n        },\n        isOptionSelected: function(value: string):boolean {\n            return filterMultiSelect.isOptionSelected(value);\n        },\n        enableOption: function(value: string):void {\n            filterMultiSelect.enableOption(value);\n        },\n        disableOption: function(value: string):void {\n            filterMultiSelect.disableOption(value);\n        },\n        isOptionDisabled: function(value: string):boolean {\n            return filterMultiSelect.isOptionDisabled(value);\n        },\n        enable: function():void {\n            filterMultiSelect.enable();\n        },\n        disable: function():void {\n            filterMultiSelect.disable();\n        },\n        selectAll: function():void {\n            filterMultiSelect.selectAll();\n        },\n        deselectAll: function():void {\n            filterMultiSelect.deselectAll();\n        },\n        getSelectedOptionsAsJson: function(includeDisabled = true):string {\n            return filterMultiSelect.getSelectedOptionsAsJson(includeDisabled);\n        }\n    };\n\n    // store applied element\n    ($.fn as any).filterMultiSelect.applied.push(methods);\n\n    return methods;\n};\n\n// activate plugin by targeting selector\n$(function () {\n    // factory defaults\n    let selector: string = typeof ($.fn as any).filterMultiSelect.selector === 'undefined' ? 'select.filter-multi-select' : ($.fn as any).filterMultiSelect.selector;\n    // target\n    let s: JQuery<HTMLElement> = $(selector);\n    s.each((i,e) => {\n        ($(e) as any).filterMultiSelect();\n    });\n});\n\n// store collection of applied elements\n($.fn as any).filterMultiSelect.applied = new Array();\n\n// define the plugin's global default selector.\n($.fn as any).filterMultiSelect.selector = undefined;\n\n// define the plugin's global default options.\n($.fn as any).filterMultiSelect.args = {};"],"names":["$"],"mappings":"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"}