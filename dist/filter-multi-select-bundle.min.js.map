{"version":3,"file":"filter-multi-select-bundle.js","sources":["../src/FilterMultiSelect.ts","../src/filter-multi-select.ts"],"names":["$","selectTarget","args","_this","decrementItemFocus","focusItem","this","documentClickListener","e","div","target","contains","closeDropdown","viewBar","dispatchEvent","MouseEvent","fmsMousedownListener","get","t","name","array","find","toArray","filterInput","type","placeholder","filterText","clearButton","document","createElement","filter","append","items","textContent","placeholderText","dropDown","caseSensitive","allowEnablingAndDisabling","focusable","Array","initialize","htmloptions","htmlOptions","map","o","i","checkValue","value","label","FilterMultiSelect","SingleOption","fms","defaultSelected","disabled","length","jsoptions","jsOptions","j","selected","concat","forEach","v","getValue","counts","undefined","opts","Error","class_2","_super","call","prototype","markDeselect","checkbox","checked","isDisabled","options","l","event","selectAllOption","tabIndex","className","selectedItems","disableNoPermissionCheck","log","m","attachDropdownListeners","stopImmediatePropagation","updateDropdownList","isSelected","clearFilterAndRefocus","text","hide","show","showing","push","getLabel","toLowerCase","indexOf","focus","isClosed","classList","removeEventListener","documentKeydownListener","remove","addEventListener","fmsFocusListener","itemFocus","isHidden","refocusFilter","option","areSomeSelected","markSelectAllNotDisabled","hidden","markSelectPartial","disable","enable","areAllSelected","reduce","acc","cur","areAllDisabled","getOption","NULL_OPTION","_i","_a","select","deselect","row","htmlFor","nchbx","selectNoDisabledCheck","preventDefault","stopPropagation","closeButton","queueOption","dispatchSelectedEvent","update","unqueueOption","isEnablingAndDisablingPermitted","selectedItemBadge","labelFor","filterMultiSelect","$__default","extend","fn","selectAllText","getRootElement","replaceWith","methods","hasOption","selectOption","deselectOption","isOptionSelected","enableOption","disableOption","isOptionDisabled","selectAll","deselectAll","getSelectedOptionsAsJson","includeDisabled","selector","s","applied"],"mappings":"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","sourcesContent":["/*! \n *  Multiple select dropdown with filter jQuery plugin.\n *  Copyright (C) 2022  Andrew Wagner  github.com/andreww1011\n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n * \n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n * \n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, write to the Free Software\n *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301\n *  USA\n */\nimport $, { map } from 'jquery';\n\nconst NULL_OPTION = new class implements Option {\n    public initialize(): void {}\n    public select(): void {}\n    public deselect(): void {}\n    public enable(): void {}\n    public disable(): void {}\n    public isSelected(): boolean {return false;}\n    public isDisabled(): boolean {return false;}\n    public getListItem(): HTMLElement {return document.createElement('div');}\n    public getSelectedItemBadge(): HTMLElement {return document.createElement('div');}\n    public getLabel(): string {return 'NULL_OPTION'}\n    public getValue(): string {return 'NULL_OPTION'}\n    public show(): void {}\n    public hide(): void {}\n    public isHidden(): boolean {return false;}\n    public focus(): void {}\n}  \n\ninterface Option {\n    initialize(): void;\n    select(): void;\n    deselect(): void;\n    enable(): void;\n    disable(): void;\n    isSelected(): boolean;\n    isDisabled(): boolean;\n    getListItem(): HTMLElement;\n    getSelectedItemBadge(): HTMLElement;\n    getLabel(): string;\n    getValue(): string;\n    show(): void;\n    hide(): void;\n    isHidden(): boolean;\n    focus(): void;\n}\n\nconst DEBUG = false;\n\nexport default class FilterMultiSelect {\n\n    private static SingleOption = class implements Option {\n        protected div: HTMLDivElement;\n        protected checkbox: HTMLInputElement;\n        protected labelFor: HTMLLabelElement;\n        protected closeButton: HTMLButtonElement;\n        protected selectedItemBadge: HTMLSpanElement;\n        protected fms: FilterMultiSelect;\n    \n        constructor(fms: FilterMultiSelect, row: number, name:string, label: string, value: string, checked: boolean, disabled: boolean) {\n            this.fms = fms;\n            this.div = document.createElement('div');\n            this.checkbox = document.createElement('input');\n            this.checkbox.type = 'checkbox';\n            let id: string = name + '-' + row.toString();\n            let nchbx: string = id + '-chbx';\n            this.checkbox.id = nchbx;\n            this.checkbox.name = name;\n            this.checkbox.value = value;\n            this.checkbox.checked = checked;\n            this.checkbox.disabled = disabled;\n            this.labelFor = document.createElement('label');\n            this.labelFor.htmlFor = nchbx;\n            this.labelFor.textContent = label;\n            this.div.append(this.checkbox, this.labelFor);\n            this.closeButton = document.createElement('button');\n            this.closeButton.type = 'button';\n            this.closeButton.innerHTML = '&times;';\n            this.selectedItemBadge = document.createElement('span');\n            this.selectedItemBadge.setAttribute('data-id',id);\n            this.selectedItemBadge.textContent = label;\n            this.selectedItemBadge.append(this.closeButton);\n        }\n    \n        private log(m: string, e: Event):void {\n            if (DEBUG) {\n                console.log(e.timeStamp + \" - \" + m + \":\" + e.type + \":\" + e.target)\n            }\n        }\n    \n        public initialize(): void {\n            this.div.className = 'dropdown-item custom-control';\n            this.checkbox.className = 'custom-control-input custom-checkbox';\n            this.labelFor.className = 'custom-control-label';\n            this.selectedItemBadge.className = 'item';\n            if (this.isSelected()) {\n                this.selectNoDisabledCheck();\n            }\n            if (this.isDisabled()) {\n                this.disableNoPermissionCheck();\n            }\n            this.checkbox.addEventListener('change', (e: Event) => {\n                e.stopPropagation();\n                if (this.isDisabled() || this.fms.isDisabled()) {\n                    e.preventDefault();\n                    return;\n                }\n                if (DEBUG) {\n                    this.log('checkbox',e);\n                }\n                \n                if (this.isSelected()) {\n                    this.select();\n                } else {\n                    this.deselect();\n                }\n                let numShown = this.fms.showing.length;\n                if (numShown === 1) {\n                    this.fms.clearFilterAndRefocus();\n                }\n            }, true);\n            this.checkbox.addEventListener('keyup', (e: KeyboardEvent) => {\n                if (DEBUG) {\n                    this.log('checkbox',e);\n                }\n                switch (e.key) {\n                    case \"Enter\":\n                        e.stopPropagation();\n                        this.checkbox.dispatchEvent(new MouseEvent('click'));\n                        break;\n                    default:\n                        break;\n                }\n            }, true)\n            this.closeButton.addEventListener('click', (e: Event) => {\n                e.stopPropagation();\n                if (this.isDisabled() || this.fms.isDisabled()) return;\n                if (DEBUG) {\n                    this.log('closeButton',e);\n                }\n                this.deselect();\n                if (!this.fms.isClosed()) {\n                    this.fms.refocusFilter();\n                }\n            }, true);\n            this.checkbox.tabIndex = -1;\n            this.closeButton.tabIndex = -1;\n        }\n    \n        public select(): void {\n            if (this.isDisabled()) return;\n            this.selectNoDisabledCheck();\n        }\n\n        private selectNoDisabledCheck(): void {\n            this.checkbox.checked = true;\n            this.fms.queueOption(this);\n            this.fms.dispatchSelectedEvent(this);\n            this.fms.update();\n        }\n    \n        public deselect(): void {\n            if (this.isDisabled()) return;\n            this.checkbox.checked = false;\n            this.fms.unqueueOption(this);\n            this.fms.dispatchDeselectedEvent(this);\n            this.fms.update();\n        }\n    \n        public enable(): void {\n            if (!this.fms.isEnablingAndDisablingPermitted()) return;\n            this.checkbox.disabled = false;\n            this.selectedItemBadge.classList.remove('disabled');\n            this.fms.update();\n        }\n    \n        public disable(): void {\n            if (!this.fms.isEnablingAndDisablingPermitted()) return;\n            this.disableNoPermissionCheck();\n        }\n\n        private disableNoPermissionCheck(): void {\n            this.checkbox.disabled = true;\n            this.selectedItemBadge.classList.add('disabled');\n            this.fms.update();\n        }\n    \n        public isSelected(): boolean {\n            return this.checkbox.checked;\n        }\n    \n        public isDisabled(): boolean {\n            return this.checkbox.disabled;\n        }\n    \n        public getListItem(): HTMLElement {\n            return this.div;\n        }\n    \n        public getSelectedItemBadge(): HTMLElement {\n            return this.selectedItemBadge;\n        }\n    \n        public getLabel(): string {\n            return this.labelFor.textContent;\n        }\n    \n        public getValue(): string {\n            return this.checkbox.value;\n        }\n    \n        public show(): void {\n            this.div.hidden = false;\n        }\n    \n        public hide(): void {\n            this.div.hidden = true;\n        }\n    \n        public isHidden(): boolean {\n            return this.div.hidden;\n        }\n\n        public focus(): void {\n            this.labelFor.focus();\n        }\n    }\n\n    private static createOptions(fms: FilterMultiSelect, name: string, htmlOptions: Array<HTMLOptionElement>, jsOptions: Array<[label:string, value:string, selected?:boolean, disabled?:boolean]>): Array<Option> {\n        let htmloptions =  htmlOptions.map((o, i) => {\n            FilterMultiSelect.checkValue(o.value, o.label);\n            return new FilterMultiSelect.SingleOption(fms, i, name, o.label, o.value, o.defaultSelected, o.disabled);\n        });\n        let j = htmlOptions.length;\n        let jsoptions = jsOptions.map((o, i) => {\n            let label: string = o[0];\n            let value: string = o[1];\n            let selected: boolean = o[2];\n            let disabled: boolean = o[3];\n            FilterMultiSelect.checkValue(value, label);\n            return new FilterMultiSelect.SingleOption(fms, j+i, name, label, value, selected, disabled);\n\n        });\n        let opts = htmloptions.concat(jsoptions);\n        let counts: any = {};\n        opts.forEach((o) => {\n            let v: string = o.getValue();\n            if (counts[v] === undefined) {\n                counts[v] = 1;\n            } else {\n                throw new Error(\"Duplicate value: \" + o.getValue() + \" (\" + o.getLabel() + \")\");\n            }\n        });\n        return opts;\n    }\n\n    private static checkValue(value:string, label:string):void {\n        if (value === \"\") {\n            throw new Error(\"Option \" + label + \" does not have an associated value.\");\n        }\n    }\n\n    private static createSelectAllOption(fms: FilterMultiSelect, name: string, label: string) {\n        return new class extends FilterMultiSelect.SingleOption {\n            constructor() {\n                super(fms,-1,name,label,'',false,false); //magic number\n                this.checkbox.indeterminate = false;\n            }\n\n            markSelectAll(): void {\n                this.checkbox.checked = true;\n                this.checkbox.indeterminate = false;\n            }\n\n            markSelectPartial(): void {\n                this.checkbox.checked = false;\n                this.checkbox.indeterminate = true;\n            }\n\n            markSelectAllNotDisabled(): void {\n                this.checkbox.checked = true;\n                this.checkbox.indeterminate = true;\n            }\n\n            markDeselect(): void {\n                this.checkbox.checked = false;\n                this.checkbox.indeterminate = false;\n            }\n\n            public select(): void {\n                if (this.isDisabled()) return;\n                this.fms.options.filter((o) => !o.isSelected())\n                    .forEach((o) => o.select());\n            }\n        \n            public deselect(): void {\n                if (this.isDisabled()) return;\n                this.fms.options.filter((o) => o.isSelected())\n                    .forEach((o) => o.deselect());\n            }\n\n            public enable(): void {\n                this.checkbox.disabled = false;\n            }\n        \n            public disable(): void {\n                this.checkbox.disabled = true;\n            }\n        } ();\n    }\n\n    public static EventType = {\n        SELECTED: \"optionselected\",\n        DESELECTED: \"optiondeselected\",\n    } as const;\n\n    private static createEvent(e: string, n: string, v: string, l: string): CustomEvent {\n        const event = new CustomEvent(e, {\n            detail: {\n                name: n,\n                value: v,\n                label: l\n            },\n            bubbles: true,\n            cancelable: true,\n            composed: false,\n        });\n        return event;\n    }\n\n    private options: Array<Option>;\n    private selectAllOption;\n    private div: HTMLDivElement;\n    private viewBar: HTMLDivElement;\n    private placeholder: HTMLSpanElement;\n    private selectedItems: HTMLSpanElement;\n    private dropDown: HTMLDivElement;\n    private filter: HTMLDivElement;\n    private filterInput: HTMLInputElement;\n    private clearButton: HTMLButtonElement;\n    private items: HTMLDivElement;\n    private caseSensitive: boolean;\n    private disabled: boolean;\n    private allowEnablingAndDisabling: boolean;\n    private filterText: string;\n    private showing: Array<number>;\n    private focusable: Array<number>;\n    private itemFocus: number;\n    private name: string;\n\n    constructor (selectTarget: JQuery<HTMLElement>, args: Args) {        \n        let t = selectTarget.get(0);\n        if (!(t instanceof HTMLSelectElement)) {\n            throw new Error(\"JQuery target must be a select element.\");\n        }\n        let select: HTMLSelectElement = t;\n        let multiple: boolean = select.multiple;\n        if (!multiple) {\n            throw new Error(\"Select element must have the \\\"multiple\\\" attribute.\")\n        }\n        let name: string = select.name;\n        if (!name) {\n            throw new Error(\"Select element must have a name attribute.\");\n        }\n        this.name = name;\n        let array: Array<HTMLOptionElement> = selectTarget.find('option').toArray();\n        this.options = FilterMultiSelect.createOptions(this, name, array, args.items);\n        this.selectAllOption = FilterMultiSelect.createSelectAllOption(this, name, args.selectAllText);\n\n        // filter box\n        this.filterInput = document.createElement('input');\n        this.filterInput.type = 'text';\n        this.filterInput.placeholder = args.filterText;\n        this.clearButton = document.createElement('button');\n        this.clearButton.type = 'button';\n        this.clearButton.innerHTML = '&times;';\n        this.filter = document.createElement('div');\n        this.filter.append(this.filterInput, this.clearButton);\n        \n        // items\n        this.items = document.createElement('div');\n        this.items.append(this.selectAllOption.getListItem());\n        this.options.forEach((o: Option) => this.items.append(o.getListItem()));\n\n        // dropdown list\n        this.dropDown = document.createElement('div');\n        this.dropDown.append(this.filter, this.items);\n\n        // placeholder\n        this.placeholder = document.createElement('span');\n        this.placeholder.textContent = args.placeholderText;\n        this.selectedItems = document.createElement('span');\n        \n        // viewbar\n        this.viewBar = document.createElement('div');\n        this.viewBar.append(this.placeholder, this.selectedItems);\n\n        this.div = document.createElement('div');\n        this.div.id = select.id;\n        this.div.append(this.viewBar, this.dropDown);\n\n        this.caseSensitive = args.caseSensitive;\n        this.disabled = select.disabled;\n        this.allowEnablingAndDisabling = args.allowEnablingAndDisabling;\n        this.filterText = '';\n        this.showing = new Array<number>();\n        this.focusable = new Array<number>();\n        this.itemFocus = -2; //magic number\n\n        this.initialize();\n    }\n\n    private initialize(): void {\n        this.options.forEach(o => o.initialize());\n        this.selectAllOption.initialize();\n        \n        this.filterInput.className = 'form-control';\n        this.clearButton.tabIndex = -1;\n\n        this.filter.className = 'filter dropdown-item'\n        this.items.className = 'items dropdown-item';\n        this.dropDown.className = 'dropdown-menu';\n\n        this.placeholder.className = 'placeholder';\n        this.selectedItems.className = 'selected-items';\n        this.viewBar.className = 'viewbar form-control dropdown-toggle';\n\n        this.div.className = 'filter-multi-select dropdown';\n\n        if (this.isDisabled()) {\n            this.disableNoPermissionCheck();\n        }\n\n        this.attachDropdownListeners();\n        this.attachViewbarListeners();\n        this.closeDropdown();\n    }\n\n    private log(m: string, e: Event):void {\n        if (DEBUG) {\n            console.log(e.timeStamp + \" - \" + m + \":\" + e.type + \":\" + e.target);\n        }\n    }\n\n    private attachDropdownListeners(): void {\n        this.filterInput.addEventListener('keyup',(e: KeyboardEvent) => {\n            if (DEBUG) {\n                this.log('filterInput',e);\n            }\n            e.stopImmediatePropagation();\n            this.updateDropdownList();\n            let numShown = this.showing.length;\n            switch(e.key) {\n                case \"Enter\":\n                    if (numShown === 1) {\n                        let o: Option = this.options[this.showing[0]]; //magic number\n                        if (!o.isDisabled()) {\n                            if (o.isSelected()) {\n                                o.deselect();\n                            } else {\n                                o.select();\n                            }\n                            this.clearFilterAndRefocus();\n                        }\n                    }\n                    break;\n                case \"Escape\":\n                    if (this.filterText.length > 0) {\n                        this.clearFilterAndRefocus();\n                    } else {\n                        this.closeDropdown();\n                    }\n                    break;\n                default:\n                    break;\n            }   \n        }, true);\n        this.clearButton.addEventListener('click', (e: MouseEvent) => {\n            if (DEBUG) {\n                this.log('clearButton',e);\n            }\n            e.stopImmediatePropagation();\n            let text = this.filterInput.value;\n            if (text.length > 0) {\n                this.clearFilterAndRefocus();\n            } else {\n                this.closeDropdown();\n            }\n        }, true);\n    }\n\n    private updateDropdownList(): void {\n        let text = this.filterInput.value;\n        if (text.length > 0) {\n            this.selectAllOption.hide();\n        } else {\n            this.selectAllOption.show();\n        }\n        let showing = new Array<number>();\n        let focusable = new Array<number>();\n        if (this.caseSensitive) {\n            this.options.forEach((o: Option, i: number) => {\n                if (o.getLabel().indexOf(text) !== -1) { //magic number\n                    o.show();\n                    showing.push(i);\n                    if (!o.isDisabled()) {\n                        focusable.push(i);\n                    }\n                } else {\n                    o.hide();\n                }\n            });\n        } else {\n            this.options.forEach((o: Option, i: number) => {\n                if (o.getLabel().toLowerCase().indexOf(text.toLowerCase()) !== -1 ) { //magic number \n                    o.show();\n                    showing.push(i);\n                    if (!o.isDisabled()) {\n                        focusable.push(i);\n                    }\n                } else {\n                    o.hide();\n                }\n            });\n        }\n        this.filterText = text;\n        this.showing = showing;\n        this.focusable = focusable;\n    }\n\n    private clearFilterAndRefocus(): void {\n        if (DEBUG) {\n            console.log('clear filter');\n        }\n        this.filterInput.value = '';\n        this.updateDropdownList();\n        this.refocusFilter();\n    }\n\n    private refocusFilter() {\n        if (DEBUG) {\n            console.log('refocus filter');\n        }\n        this.filterInput.focus();\n        this.itemFocus = -2; //magic number\n    }\n\n    private attachViewbarListeners(): void {\n        this.viewBar.addEventListener('click',(e) => {\n            if (DEBUG) {\n                this.log('viewBar',e);\n            }\n            if (this.isClosed()) {\n                this.openDropdown();\n            } else {\n                this.closeDropdown();\n            }\n        });\n    }\n\n    public isClosed(): boolean {\n        return !this.dropDown.classList.contains('show');\n    }\n\n    private setTabIndex(): void {\n        if (this.isDisabled()) {\n            this.div.tabIndex = -1;\n        } else {\n            if (this.isClosed()) {\n                this.div.tabIndex = 0;\n            } else {\n                this.div.tabIndex = -1;\n            }\n        }\n    }\n\n    private closeDropdown(): void {\n        if (DEBUG) {\n            console.log('close');\n        }\n        document.removeEventListener('keydown', this.documentKeydownListener, true);\n        document.removeEventListener('click', this.documentClickListener, true);\n        this.dropDown.classList.remove('show');\n        setTimeout(() => {\n            this.setTabIndex();    \n        }, 100); //magic number\n        this.div.addEventListener('mousedown', this.fmsMousedownListener, true);\n        this.div.addEventListener('focus', this.fmsFocusListener);\n    }\n\n    private documentKeydownListener = (e: KeyboardEvent) => {\n        if (DEBUG) {\n            this.log('document',e);\n            console.log(e.key);\n        }\n        switch(e.key) {\n            case \"Tab\":\n                e.stopPropagation();\n                this.closeDropdown();\n                break;\n            case \"ArrowUp\":\n                e.stopPropagation();\n                e.preventDefault();\n                if (DEBUG) {\n                    console.log(\"up\");\n                }\n                this.decrementItemFocus();\n                this.focusItem();\n                break;\n            case \"ArrowDown\":\n                e.stopPropagation();\n                e.preventDefault();\n                if (DEBUG) {\n                    console.log(\"down\");\n                }\n                this.incrementItemFocus();\n                this.focusItem();\n                break;\n            case \"Enter\":\n            case \"Spacebar\":\n            case \" \":\n                //swallow to allow checkbox change to work\n                break;\n            default:\n                //send key to filter\n                this.refocusFilter();\n                break;\n        }\n    };\n\n    private incrementItemFocus(): void {\n        if (this.itemFocus >= this.focusable.length - 1 || this.focusable.length == 0) return;\n        this.itemFocus++;\n        if (this.itemFocus == -1 && this.selectAllOption.isHidden()) { //magic number\n            this.itemFocus++;\n        }\n    }\n\n    private decrementItemFocus(): void {\n        if (this.itemFocus <= -2) return; //magic number\n        this.itemFocus--;\n        if (this.itemFocus == -1 && this.selectAllOption.isHidden()) { //magic number\n            this.itemFocus--;\n        }\n    }\n\n    private focusItem(): void {\n        if (this.itemFocus === -2) {\n            this.refocusFilter();\n        } else if (this.itemFocus === -1) {\n            this.selectAllOption.focus();\n        } else {\n            this.options[this.focusable[this.itemFocus]].focus();\n        }\n    }\n\n    private documentClickListener = (e: MouseEvent) => {\n        if (DEBUG) {\n            this.log('document',e);\n        }\n        if (this.div !== e.target && !this.div.contains(<Node>e.target)) {\n            this.closeDropdown();\n        }\n    };\n\n    private fmsFocusListener: EventListener = (e: FocusEvent) => {\n        if (DEBUG) {\n            this.log('div',e);\n        }\n        e.stopPropagation();\n        e.preventDefault();\n        this.viewBar.dispatchEvent(new MouseEvent('click'));\n    };\n\n    private fmsMousedownListener: EventListener = (e: MouseEvent) => {\n        if (DEBUG) {\n            this.log('div',e);\n        }\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    private openDropdown() {\n        if (this.disabled) return;\n        if (DEBUG) {\n            console.log('open');\n        }\n        this.div.removeEventListener('mousedown', this.fmsMousedownListener, true);\n        this.div.removeEventListener('focus', this.fmsFocusListener);\n        this.dropDown.classList.add('show');\n        this.setTabIndex();\n        this.clearFilterAndRefocus();\n        document.addEventListener('keydown', this.documentKeydownListener, true);\n        document.addEventListener('click', this.documentClickListener, true);\n    }\n\n    private queueOption(option: Option): void {\n        if (this.options.indexOf(option) == -1) return;\n        $(this.selectedItems).append(option.getSelectedItemBadge());\n    }\n\n    private unqueueOption(option: Option): void {\n        if (this.options.indexOf(option) == -1) return;\n        $(this.selectedItems).children('[data-id=\"' + option.getSelectedItemBadge().getAttribute('data-id') + '\"]').remove();\n    }\n\n    private update(): void {\n        if (this.areAllSelected()) {\n            this.selectAllOption.markSelectAll();\n            this.placeholder.hidden = true;\n        } else if (this.areSomeSelected()) {\n            if (this.areOnlyDeselectedAlsoDisabled()) {\n                this.selectAllOption.markSelectAllNotDisabled();\n                this.placeholder.hidden = true;\n            } else {\n                this.selectAllOption.markSelectPartial();\n                this.placeholder.hidden = true;\n            }\n        } else {\n            this.selectAllOption.markDeselect();\n            this.placeholder.hidden = false;\n        }\n        if (this.areAllDisabled()) {\n            this.selectAllOption.disable();\n        } else {\n            this.selectAllOption.enable();\n        }\n    }\n\n    private areAllSelected(): boolean {\n        return this.options\n                .map((o) => o.isSelected())\n                .reduce((acc,cur) => acc && cur, true);\n    }\n\n    private areSomeSelected(): boolean {\n        return this.options\n                .map((o) => o.isSelected())\n                .reduce((acc,cur) => acc || cur, false);\n    }\n\n    private areOnlyDeselectedAlsoDisabled(): boolean {\n        return this.options\n                .filter((o) => !o.isSelected())\n                .map((o) => o.isDisabled())\n                .reduce((acc,cur) => acc && cur, true);\n    }\n\n    private areAllDisabled(): boolean {\n        return this.options\n                .map((o) => o.isDisabled())\n                .reduce((acc,cur) => acc && cur, true);\n    }\n\n    private isEnablingAndDisablingPermitted(): boolean {\n        return this.allowEnablingAndDisabling;\n    }\n\n    public getRootElement(): HTMLElement {\n        return this.div;\n    }\n\n    public hasOption(value: string): boolean {\n        return this.getOption(value) !== NULL_OPTION;\n    }\n\n    private getOption(value: string): Option {\n        for (const o of this.options) {\n            if (o.getValue() == value) {\n                return o;\n            }\n        }\n        return NULL_OPTION;\n    }\n\n    public selectOption(value: string): void {\n        this.getOption(value).select();\n    }\n\n    public deselectOption(value: string): void {\n        this.getOption(value).deselect();\n    }\n\n    public isOptionSelected(value: string): boolean {\n        return this.getOption(value).isSelected();\n    }\n\n    public enableOption(value: string): void {\n        this.getOption(value).enable();\n    }\n\n    public disableOption(value: string): void {\n        this.getOption(value).disable();\n    }\n\n    public isOptionDisabled(value: string): boolean {\n        return this.getOption(value).isDisabled();\n    }\n\n    public disable(): void {\n        if (!this.isEnablingAndDisablingPermitted()) return;\n        this.disableNoPermissionCheck();\n    }\n\n    private disableNoPermissionCheck(): void {\n        this.options.forEach((o) => this.setBadgeDisabled(o));\n        this.disabled = true;\n        this.div.classList.add('disabled');\n        this.viewBar.classList.remove('dropdown-toggle');\n        this.closeDropdown();\n    }\n\n    private setBadgeDisabled(o: Option):void {\n        o.getSelectedItemBadge().classList.add('disabled');\n    }\n\n    public enable(): void {\n        if (!this.isEnablingAndDisablingPermitted()) return;\n        this.options.forEach((o) => {\n            if (!o.isDisabled()) {\n                this.setBadgeEnabled(o);\n            }\n        });\n        this.disabled = false;\n        this.div.classList.remove('disabled');\n        this.setTabIndex(); \n        this.viewBar.classList.add('dropdown-toggle');\n    }\n\n    private setBadgeEnabled(o: Option):void {\n        o.getSelectedItemBadge().classList.remove('disabled');\n    }\n\n    public isDisabled(): boolean {\n        return this.disabled;\n    }\n\n    public selectAll(): void {\n        this.selectAllOption.select();\n    }\n\n    public deselectAll(): void {\n        this.selectAllOption.deselect();\n    }\n\n    private getSelectedOptions(includeDisabled = true): Array<Option> {\n        let a = this.options;\n        if (!includeDisabled) {\n            if (this.isDisabled()) {\n                return new Array();\n            }\n            a = a.filter((o) => !o.isDisabled());\n        }\n        a = a.filter((o) => o.isSelected());\n        return a;\n    }\n\n    public getSelectedOptionsAsJson(includeDisabled = true): string {\n        const data: any = {};\n        let a: Array<string> = this.getSelectedOptions(includeDisabled).map((o) => o.getValue());\n        data[this.getName()] = a;\n        let c = JSON.stringify(data, null, \"  \");\n        if (DEBUG) {\n            console.log(c);\n        }\n        return c;\n    }\n\n    public getName(): string {\n        return this.name;\n    }\n\n    private dispatchSelectedEvent(option: Option): void {\n        this.dispatchEvent(\n            FilterMultiSelect.EventType.SELECTED,\n            option.getValue(),\n            option.getLabel());\n    }\n\n    private dispatchDeselectedEvent(option: Option): void {\n        this.dispatchEvent(\n            FilterMultiSelect.EventType.DESELECTED,\n            option.getValue(),\n            option.getLabel());\n    }\n\n    private dispatchEvent(eventType: string, value: string, label: string): void {\n        let event: CustomEvent = FilterMultiSelect.createEvent(eventType, this.getName(), value, label);\n        this.viewBar.dispatchEvent(event);\n    }\n}","/*! \n *  Multiple select dropdown with filter jQuery plugin.\n *  Copyright (C) 2022  Andrew Wagner  github.com/andreww1011\n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n * \n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n * \n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, write to the Free Software\n *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301\n *  USA\n */\nimport $ from 'jquery';\nimport FilterMultiSelect from './FilterMultiSelect';\n\n// define the plugin function on the jQuery extension point.\n($.fn as any).filterMultiSelect = function (this: JQuery, args: Args): any {\n    let target = this;\n    // merge the global options with the per-call options.\n    args = $.extend({}, ($.fn as any).filterMultiSelect.args, args);\n\n    // factory defaults\n    if (typeof args.placeholderText === 'undefined') args.placeholderText = 'nothing selected';\n    if (typeof args.filterText === 'undefined') args.filterText = 'Filter';\n    if (typeof args.selectAllText === 'undefined') args.selectAllText = 'Select All';\n    if (typeof args.caseSensitive === 'undefined') args.caseSensitive = false;\n    if (typeof args.allowEnablingAndDisabling === 'undefined') args.allowEnablingAndDisabling = true;\n    if (typeof args.items === 'undefined') args.items = new Array();\n\n    let filterMultiSelect = new FilterMultiSelect(target, args);\n  \n    const fms = $(filterMultiSelect.getRootElement());\n    target.replaceWith(fms);\n    \n    var methods = {\n        hasOption: function(value: string):boolean {\n            return filterMultiSelect.hasOption(value);\n        },\n        selectOption: function(value: string):void {\n            filterMultiSelect.selectOption(value);\n        },\n        deselectOption: function(value: string):void {\n            filterMultiSelect.deselectOption(value);\n        },\n        isOptionSelected: function(value: string):boolean {\n            return filterMultiSelect.isOptionSelected(value);\n        },\n        enableOption: function(value: string):void {\n            filterMultiSelect.enableOption(value);\n        },\n        disableOption: function(value: string):void {\n            filterMultiSelect.disableOption(value);\n        },\n        isOptionDisabled: function(value: string):boolean {\n            return filterMultiSelect.isOptionDisabled(value);\n        },\n        enable: function():void {\n            filterMultiSelect.enable();\n        },\n        disable: function():void {\n            filterMultiSelect.disable();\n        },\n        selectAll: function():void {\n            filterMultiSelect.selectAll();\n        },\n        deselectAll: function():void {\n            filterMultiSelect.deselectAll();\n        },\n        getSelectedOptionsAsJson: function(includeDisabled = true):string {\n            return filterMultiSelect.getSelectedOptionsAsJson(includeDisabled);\n        }\n    };\n\n    // store applied element\n    ($.fn as any).filterMultiSelect.applied.push(methods);\n\n    return methods;\n};\n\n// activate plugin by targeting selector\n$(function () {\n    // factory defaults\n    let selector: string = typeof ($.fn as any).filterMultiSelect.selector === 'undefined' ? 'select.filter-multi-select' : ($.fn as any).filterMultiSelect.selector;\n    // target\n    let s: JQuery<HTMLElement> = $(selector);\n    s.each((i,e) => {\n        ($(e) as any).filterMultiSelect();\n    });\n});\n\n// store collection of applied elements\n($.fn as any).filterMultiSelect.applied = new Array();\n\n// define the plugin's global default selector.\n($.fn as any).filterMultiSelect.selector = undefined;\n\n// define the plugin's global default options.\n($.fn as any).filterMultiSelect.args = {};"]}