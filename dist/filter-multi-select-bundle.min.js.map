{"version":3,"file":"filter-multi-select-bundle.js","sources":["../src/FilterMultiSelect.ts","../src/filter-multi-select.ts"],"names":["$","class_1","prototype","show","hide","isHidden","focus","activate","deactivate","selectTarget","args","key","e","stopPropagation","_this","closeDropdown","decrementItemFocus","focusItem","refocusFilter","this","documentClickListener","div","target","contains","preventDefault","viewBar","dispatchEvent","MouseEvent","t","get","Error","name","array","find","toArray","numSelectedItems","maxNumSelectedItems","select","multiple","selectionLimit","parseInt","getAttribute","numOptions","restrictSelection","UnrestrictedSelectAllOption","selectAllText","filterInput","document","createElement","placeholder","filterText","clearButton","filter","items","forEach","o","getListItem","textContent","placeholderText","label","labelText","customLabel","hidden","selectedItems","id","caseSensitive","disabled","allowEnablingAndDisabling","itemFocus","initialize","fms","htmlOptions","jsOptions","i","checkValue","value","htmloptions","concat","jsoptions","v","getValue","counts","undefined","FilterMultiSelect","createEvent","n","l","bubbles","cancelable","composed","event","options","selectAllOption","tabIndex","className","isDisabled","disableNoPermissionCheck","attachDropdownListeners","log","m","updateDropdownList","numShown","showing","length","isSelected","stopImmediatePropagation","text","clearFilterAndRefocus","getLabel","toLowerCase","indexOf","push","openDropdown","dropDown","classList","setTabIndex","isClosed","removeEventListener","documentKeydownListener","addEventListener","fmsMousedownListener","fmsFocusListener","option","append","getSelectedItemBadge","children","remove","areAllSelected","markSelectAll","areSomeSelected","areOnlyDeselectedAlsoDisabled","markSelectAllNotDisabled","enable","updateSelectionCounter","map","reduce","acc","cur","isEnablingAndDisablingPermitted","getOption","NULL_OPTION","_i","_a","deselect","row","toString","nchbx","checked","checkbox","labelFor","closeButton","innerHTML","selectedItemBadge","initiallyChecked","setDisabledViewState","update","selectNoDisabledCheck","canSelect","isActive","queueOption","dispatchSelectedEvent","dispatchDeselectedEvent","setEnabledViewState","add","class_2","class_3","_super","call","indeterminate","class_4","DESELECTED","filterMultiSelect","$__default","extend","fn","Array","getRootElement","methods","includeDisabled","applied","selector","s","each"],"mappings":"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","sourcesContent":["/*! \n *  Multiple select dropdown with filter jQuery plugin.\n *  Copyright (C) 2022  Andrew Wagner  github.com/andreww1011\n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n * \n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n * \n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, write to the Free Software\n *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301\n *  USA\n */\nimport $, { map } from 'jquery';\n\nconst NULL_OPTION = new class implements Option {\n    initialize(): void {}\n    select(): void {}\n    deselect(): void {}\n    enable(): void {}\n    disable(): void {}\n    isSelected(): boolean {return false;}\n    isDisabled(): boolean {return true;}\n    getListItem(): HTMLElement {return document.createElement('div');}\n    getSelectedItemBadge(): HTMLElement {return document.createElement('div');}\n    getLabel(): string {return 'NULL_OPTION'}\n    getValue(): string {return 'NULL_OPTION'}\n    show(): void {}\n    hide(): void {}\n    isHidden(): boolean {return true;}\n    focus(): void {}\n    activate(): void {}\n    deactivate(): void {}\n}  \n\ninterface Option {\n    initialize(): void;\n    select(): void;\n    deselect(): void;\n    enable(): void;\n    disable(): void;\n    isSelected(): boolean;\n    isDisabled(): boolean;\n    getListItem(): HTMLElement;\n    getSelectedItemBadge(): HTMLElement;\n    getLabel(): string;\n    getValue(): string;\n    show(): void;\n    hide(): void;\n    isHidden(): boolean;\n    focus(): void;\n    activate(): void;\n    deactivate(): void;\n}\n\ninterface SelectAllOption extends Option {\n    markSelectAll(): void;\n    markSelectPartial(): void;\n    markSelectAllNotDisabled(): void;\n    markDeselect(): void;\n}\n\nconst DEBUG = false;\n\nexport default class FilterMultiSelect {\n\n    private static SingleOption = class implements Option {\n        protected div: HTMLDivElement;\n        protected checkbox: HTMLInputElement;\n        protected labelFor: HTMLLabelElement;\n        protected closeButton: HTMLButtonElement;\n        protected selectedItemBadge: HTMLSpanElement;\n        protected fms: FilterMultiSelect;\n        protected active: boolean;\n        protected disabled: boolean;\n        private initiallyChecked: boolean;\n    \n        constructor(fms: FilterMultiSelect, row: number, name:string, label: string, value: string, checked: boolean, disabled: boolean) {\n            this.fms = fms;\n            this.div = document.createElement('div');\n            this.checkbox = document.createElement('input');\n            this.checkbox.type = 'checkbox';\n            let id: string = name + '-' + row.toString();\n            let nchbx: string = id + '-chbx';\n            this.checkbox.id = nchbx;\n            this.checkbox.name = name;\n            this.checkbox.value = value;\n            this.initiallyChecked = checked;\n            this.checkbox.checked = false;\n            this.checkbox.disabled = disabled;\n            this.labelFor = document.createElement('label');\n            this.labelFor.htmlFor = nchbx;\n            this.labelFor.textContent = label;\n            this.div.append(this.checkbox, this.labelFor);\n            this.closeButton = document.createElement('button');\n            this.closeButton.type = 'button';\n            this.closeButton.innerHTML = '&times;';\n            this.selectedItemBadge = document.createElement('span');\n            this.selectedItemBadge.setAttribute('data-id',id);\n            this.selectedItemBadge.textContent = label;\n            this.selectedItemBadge.append(this.closeButton);\n            this.disabled = disabled;\n            this.active = true;\n        }\n    \n        private log(m: string, e: Event):void {\n            if (DEBUG) {\n                console.log(e.timeStamp + \" - \" + m + \":\" + e.type + \":\" + e.target)\n            }\n        }\n    \n        public initialize(): void {\n            this.div.className = 'dropdown-item custom-control';\n            this.checkbox.className = 'custom-control-input custom-checkbox';\n            this.labelFor.className = 'custom-control-label';\n            this.selectedItemBadge.className = 'item';\n            if (this.initiallyChecked) {\n                this.selectNoDisabledCheck();\n            }\n            if (this.disabled) {\n                this.setDisabledViewState();\n            }\n            this.fms.update();\n            this.checkbox.addEventListener('change', (e: Event) => {\n                e.stopPropagation();\n                if (this.isDisabled() || this.fms.isDisabled()) {\n                    e.preventDefault();\n                    return;\n                }\n                if (DEBUG) {\n                    this.log('checkbox',e);\n                }\n                \n                if (this.isSelected()) {\n                    this.select();\n                } else {\n                    this.deselect();\n                }\n                let numShown = this.fms.showing.length;\n                if (numShown === 1) {\n                    this.fms.clearFilterAndRefocus();\n                }\n            }, true);\n            this.checkbox.addEventListener('keyup', (e: KeyboardEvent) => {\n                if (DEBUG) {\n                    this.log('checkbox',e);\n                }\n                switch (e.key) {\n                    case \"Enter\":\n                        e.stopPropagation();\n                        this.checkbox.dispatchEvent(new MouseEvent('click'));\n                        break;\n                    default:\n                        break;\n                }\n            }, true)\n            this.closeButton.addEventListener('click', (e: Event) => {\n                e.stopPropagation();\n                if (this.isDisabled() || this.fms.isDisabled()) return;\n                if (DEBUG) {\n                    this.log('closeButton',e);\n                }\n                this.deselect();\n                if (!this.fms.isClosed()) {\n                    this.fms.refocusFilter();\n                }\n            }, true);\n            this.checkbox.tabIndex = -1;\n            this.closeButton.tabIndex = -1;\n        }\n    \n        public select(): void {\n            if (this.isDisabled()) return;\n            this.selectNoDisabledCheck();\n            this.fms.update();\n        }\n\n        private selectNoDisabledCheck(): void {\n            if (!this.fms.canSelect() || !this.isActive()) return;\n            this.checkbox.checked = true;\n            this.fms.queueOption(this);\n            this.fms.dispatchSelectedEvent(this);\n        }\n    \n        public deselect(): void {\n            if (this.isDisabled()) return;\n            this.checkbox.checked = false;\n            this.fms.unqueueOption(this);\n            this.fms.dispatchDeselectedEvent(this);\n            this.fms.update();\n        }\n    \n        public enable(): void {\n            this.disabled = false;\n            this.setEnabledViewState();\n            this.fms.update();\n        }\n\n        private setEnabledViewState(): void {\n            this.checkbox.disabled = false;\n            this.selectedItemBadge.classList.remove('disabled');\n        }\n    \n        public disable(): void {\n            this.disabled = true;\n            this.setDisabledViewState();\n            this.fms.update();\n        }\n\n        private setDisabledViewState(): void {\n            this.checkbox.disabled = true;\n            this.selectedItemBadge.classList.add('disabled');\n        }\n    \n        public isSelected(): boolean {\n            return this.checkbox.checked;\n        }\n    \n        public isDisabled(): boolean {\n            return this.checkbox.disabled;\n        }\n    \n        public getListItem(): HTMLElement {\n            return this.div;\n        }\n    \n        public getSelectedItemBadge(): HTMLElement {\n            return this.selectedItemBadge;\n        }\n    \n        public getLabel(): string {\n            return this.labelFor.textContent;\n        }\n    \n        public getValue(): string {\n            return this.checkbox.value;\n        }\n    \n        public show(): void {\n            this.div.hidden = false;\n        }\n    \n        public hide(): void {\n            this.div.hidden = true;\n        }\n    \n        public isHidden(): boolean {\n            return this.div.hidden;\n        }\n\n        public focus(): void {\n            this.labelFor.focus();\n        }\n\n        isActive(): boolean {\n            return this.active;\n        }\n\n        public activate(): void {\n            this.active = true;\n            if (!this.disabled) {\n                this.setEnabledViewState();\n            }\n        }\n\n        public deactivate(): void {\n            this.active = false;\n            this.setDisabledViewState();\n        }\n    }\n\n    private static createOptions(fms: FilterMultiSelect, name: string, htmlOptions: Array<HTMLOptionElement>, jsOptions: Array<[label:string, value:string, selected?:boolean, disabled?:boolean]>): Array<Option> {\n        let htmloptions =  htmlOptions.map((o, i) => {\n            FilterMultiSelect.checkValue(o.value, o.label);\n            return new FilterMultiSelect.SingleOption(fms, i, name, o.label, o.value, o.defaultSelected, o.disabled);\n        });\n        let j = htmlOptions.length;\n        let jsoptions = jsOptions.map((o, i) => {\n            let label: string = o[0];\n            let value: string = o[1];\n            let selected: boolean = o[2];\n            let disabled: boolean = o[3];\n            FilterMultiSelect.checkValue(value, label);\n            return new FilterMultiSelect.SingleOption(fms, j+i, name, label, value, selected, disabled);\n\n        });\n        let opts = htmloptions.concat(jsoptions);\n        let counts: any = {};\n        opts.forEach((o) => {\n            let v: string = o.getValue();\n            if (counts[v] === undefined) {\n                counts[v] = 1;\n            } else {\n                throw new Error(\"Duplicate value: \" + o.getValue() + \" (\" + o.getLabel() + \")\");\n            }\n        });\n        return opts;\n    }\n\n    private static checkValue(value:string, label:string):void {\n        if (value === \"\") {\n            throw new Error(\"Option \" + label + \" does not have an associated value.\");\n        }\n    }\n\n    private static UnrestrictedSelectAllOption = class extends FilterMultiSelect.SingleOption implements SelectAllOption {\n        constructor(fms: FilterMultiSelect, name: string, label: string) {\n            super(fms,-1,name,label,'',false,false); //magic number\n            this.checkbox.indeterminate = false;\n        }\n\n        public markSelectAll(): void {\n            this.checkbox.checked = true;\n            this.checkbox.indeterminate = false;\n        }\n\n        public markSelectPartial(): void {\n            this.checkbox.checked = false;\n            this.checkbox.indeterminate = true;\n        }\n\n        public markSelectAllNotDisabled(): void {\n            this.checkbox.checked = true;\n            this.checkbox.indeterminate = true;\n        }\n\n        public markDeselect(): void {\n            this.checkbox.checked = false;\n            this.checkbox.indeterminate = false;\n        }\n\n        public select(): void {\n            if (this.isDisabled()) return;\n            this.fms.options.filter((o) => !o.isSelected())\n                .forEach((o) => o.select());\n            this.fms.update();\n        }\n    \n        public deselect(): void {\n            if (this.isDisabled()) return;\n            this.fms.options.filter((o) => o.isSelected())\n                .forEach((o) => o.deselect());\n            this.fms.update();\n        }\n\n        public enable(): void {\n            this.disabled = false;\n            this.checkbox.disabled = false;\n        }\n    \n        public disable(): void {\n            this.disabled = true;\n            this.checkbox.disabled = true;\n        }\n    }\n\n    private static RestrictedSelectAllOption = class implements SelectAllOption {\n        private usao: SelectAllOption;\n        \n        constructor(fms: FilterMultiSelect, name: string, label: string) {\n            this.usao = new FilterMultiSelect.UnrestrictedSelectAllOption(fms,name,label);\n        }\n        \n        initialize(): void {this.usao.initialize();}\n        select(): void {}\n        deselect(): void {this.usao.deselect();}\n        enable(): void {}\n        disable(): void {}\n        isSelected(): boolean {return false;}\n        isDisabled(): boolean {return true;}\n        getListItem(): HTMLElement {return document.createElement('div');}\n        getSelectedItemBadge(): HTMLElement {return document.createElement('div');}\n        getLabel(): string {return 'RESTRICTED_SELECT_ALL_OPTION'}\n        getValue(): string {return 'RESTRICTED_SELECT_ALL_OPTION'}\n        show(): void {}\n        hide(): void {}\n        isHidden(): boolean {return true;}\n        focus(): void {}\n        markSelectAll(): void {}\n        markSelectPartial(): void {}\n        markSelectAllNotDisabled(): void {}\n        markDeselect(): void {}\n        activate(): void {}\n        deactivate(): void {}\n    }\n\n    public static EventType = {\n        SELECTED: \"optionselected\",\n        DESELECTED: \"optiondeselected\",\n    } as const;\n\n    private static createEvent(e: string, n: string, v: string, l: string): CustomEvent {\n        const event = new CustomEvent(e, {\n            detail: {\n                name: n,\n                value: v,\n                label: l\n            },\n            bubbles: true,\n            cancelable: true,\n            composed: false,\n        });\n        return event;\n    }\n\n    private options: Array<Option>;\n    private selectAllOption: SelectAllOption;\n    private div: HTMLDivElement;\n    private viewBar: HTMLDivElement;\n    private placeholder: HTMLSpanElement;\n    private selectedItems: HTMLSpanElement;\n    private dropDown: HTMLDivElement;\n    private filter: HTMLDivElement;\n    private filterInput: HTMLInputElement;\n    private clearButton: HTMLButtonElement;\n    private items: HTMLDivElement;\n    private caseSensitive: boolean;\n    private disabled: boolean;\n    private allowEnablingAndDisabling: boolean;\n    private filterText: string;\n    private showing: Array<number>;\n    private itemFocus: number;\n    private name: string;\n    private label: HTMLSpanElement;\n    private maxNumSelectedItems: number;\n    private numSelectedItems: number;\n    private selectionCounter: HTMLSpanElement;\n\n    constructor (selectTarget: JQuery<HTMLElement>, args: Args) {        \n        let t = selectTarget.get(0);\n        if (!(t instanceof HTMLSelectElement)) {\n            throw new Error(\"JQuery target must be a select element.\");\n        }\n        let select: HTMLSelectElement = t;\n        let name: string = select.name;\n        if (!name) {\n            throw new Error(\"Select element must have a name attribute.\");\n        }\n        this.name = name;\n        let array: Array<HTMLOptionElement> = selectTarget.find('option').toArray();\n        this.options = FilterMultiSelect.createOptions(this, name, array, args.items);\n\n        // restrict selection\n        this.numSelectedItems = 0;\n        this.maxNumSelectedItems =  !select.multiple ? 1 : \n                                    args.selectionLimit > 0 ? args.selectionLimit :\n                                    parseInt(select.getAttribute('multiple')) > 0 ? parseInt(select.getAttribute('multiple')) :\n                                    0; //magic number \n        const numOptions: number = this.options.length;\n        const restrictSelection: boolean = this.maxNumSelectedItems > 0 && this.maxNumSelectedItems < numOptions;\n        this.maxNumSelectedItems = restrictSelection ? this.maxNumSelectedItems : numOptions + 1;\n        this.selectAllOption = restrictSelection ? \n                new FilterMultiSelect.RestrictedSelectAllOption(this, name, args.selectAllText) : \n                new FilterMultiSelect.UnrestrictedSelectAllOption(this, name, args.selectAllText);\n\n        // filter box\n        this.filterInput = document.createElement('input');\n        this.filterInput.type = 'text';\n        this.filterInput.placeholder = args.filterText;\n        this.clearButton = document.createElement('button');\n        this.clearButton.type = 'button';\n        this.clearButton.innerHTML = '&times;';\n        this.filter = document.createElement('div');\n        this.filter.append(this.filterInput, this.clearButton);\n\n        // items\n        this.items = document.createElement('div');\n        this.items.append(this.selectAllOption.getListItem());\n        this.options.forEach((o: Option) => this.items.append(o.getListItem()));\n\n        // dropdown list\n        this.dropDown = document.createElement('div');\n        this.dropDown.append(this.filter, this.items);\n\n        // placeholder\n        this.placeholder = document.createElement('span');\n        this.placeholder.textContent = args.placeholderText;\n        this.selectedItems = document.createElement('span');\n\n        // label\n        this.label = document.createElement('span');\n        this.label.textContent = args.labelText;\n        let customLabel: boolean = args.labelText.length != 0;\n        if (!customLabel) {\n            this.label.hidden = true;\n        }\n\n        // selection counter\n        this.selectionCounter = document.createElement('span');\n        this.selectionCounter.hidden = !restrictSelection;\n\n        // viewbar\n        this.viewBar = document.createElement('div');\n        this.viewBar.append(this.label, this.selectionCounter, this.placeholder, this.selectedItems);\n\n        this.div = document.createElement('div');\n        this.div.id = select.id;\n        this.div.append(this.viewBar, this.dropDown);\n\n        this.caseSensitive = args.caseSensitive;\n        this.disabled = select.disabled;\n        this.allowEnablingAndDisabling = args.allowEnablingAndDisabling;\n        this.filterText = '';\n        this.showing = new Array<number>();\n        this.itemFocus = -2; //magic number\n\n        this.initialize();\n    }\n\n    private initialize(): void {\n        this.options.forEach(o => o.initialize());\n        this.selectAllOption.initialize();\n        \n        \n        this.filterInput.className = 'form-control';\n        this.clearButton.tabIndex = -1;\n\n        this.filter.className = 'filter dropdown-item'\n        this.items.className = 'items dropdown-item';\n        this.dropDown.className = 'dropdown-menu';\n\n        this.placeholder.className = 'placeholder';\n        this.selectedItems.className = 'selected-items';\n        this.viewBar.className = 'viewbar form-control dropdown-toggle';\n        this.label.className = 'col-form-label mr-2 text-dark';\n        this.selectionCounter.className = 'mr-2';\n\n        this.div.className = 'filter-multi-select dropdown';\n\n        if (this.isDisabled()) {\n            this.disableNoPermissionCheck();\n        }\n\n        this.attachDropdownListeners();\n        this.attachViewbarListeners();\n        \n        this.closeDropdown();\n    }\n\n    private log(m: string, e: Event):void {\n        if (DEBUG) {\n            console.log(e.timeStamp + \" - \" + m + \":\" + e.type + \":\" + e.target);\n        }\n    }\n\n    private attachDropdownListeners(): void {\n        this.filterInput.addEventListener('keyup',(e: KeyboardEvent) => {\n            if (DEBUG) {\n                this.log('filterInput',e);\n            }\n            e.stopImmediatePropagation();\n            this.updateDropdownList();\n            let numShown = this.showing.length;\n            switch(e.key) {\n                case \"Enter\":\n                    if (numShown === 1) {\n                        let o: Option = this.options[this.showing[0]]; //magic number\n                        if (!o.isDisabled()) {\n                            if (o.isSelected()) {\n                                o.deselect();\n                            } else {\n                                o.select();\n                            }\n                            this.clearFilterAndRefocus();\n                        }\n                    }\n                    break;\n                case \"Escape\":\n                    if (this.filterText.length > 0) {\n                        this.clearFilterAndRefocus();\n                    } else {\n                        this.closeDropdown();\n                    }\n                    break;\n                default:\n                    break;\n            }   \n        }, true);\n        this.clearButton.addEventListener('click', (e: MouseEvent) => {\n            if (DEBUG) {\n                this.log('clearButton',e);\n            }\n            e.stopImmediatePropagation();\n            let text = this.filterInput.value;\n            if (text.length > 0) {\n                this.clearFilterAndRefocus();\n            } else {\n                this.closeDropdown();\n            }\n        }, true);\n    }\n\n    private updateDropdownList(): void {\n        let text = this.filterInput.value;\n        if (text.length > 0) {\n            this.selectAllOption.hide();\n        } else {\n            this.selectAllOption.show();\n        }\n        let showing = new Array<number>();\n        if (this.caseSensitive) {\n            this.options.forEach((o: Option, i: number) => {\n                if (o.getLabel().indexOf(text) !== -1) { //magic number\n                    o.show();\n                    showing.push(i);\n                } else {\n                    o.hide();\n                }\n            });\n        } else {\n            this.options.forEach((o: Option, i: number) => {\n                if (o.getLabel().toLowerCase().indexOf(text.toLowerCase()) !== -1 ) { //magic number \n                    o.show();\n                    showing.push(i);\n                } else {\n                    o.hide();\n                }\n            });\n        }\n        this.filterText = text;\n        this.showing = showing;\n    }\n\n    private clearFilterAndRefocus(): void {\n        if (DEBUG) {\n            console.log('clear filter');\n        }\n        this.filterInput.value = '';\n        this.updateDropdownList();\n        this.refocusFilter();\n    }\n\n    private refocusFilter() {\n        if (DEBUG) {\n            console.log('refocus filter');\n        }\n        this.filterInput.focus();\n        this.itemFocus = -2; //magic number\n    }\n\n    private attachViewbarListeners(): void {\n        this.viewBar.addEventListener('click',(e) => {\n            if (DEBUG) {\n                this.log('viewBar',e);\n            }\n            if (this.isClosed()) {\n                this.openDropdown();\n            } else {\n                this.closeDropdown();\n            }\n        });\n    }\n\n    public isClosed(): boolean {\n        return !this.dropDown.classList.contains('show');\n    }\n\n    private setTabIndex(): void {\n        if (this.isDisabled()) {\n            this.div.tabIndex = -1;\n        } else {\n            if (this.isClosed()) {\n                this.div.tabIndex = 0;\n            } else {\n                this.div.tabIndex = -1;\n            }\n        }\n    }\n\n    private closeDropdown(): void {\n        if (DEBUG) {\n            console.log('close');\n        }\n        document.removeEventListener('keydown', this.documentKeydownListener, true);\n        document.removeEventListener('click', this.documentClickListener, true);\n        this.dropDown.classList.remove('show');\n        setTimeout(() => {\n            this.setTabIndex();    \n        }, 100); //magic number\n        this.div.addEventListener('mousedown', this.fmsMousedownListener, true);\n        this.div.addEventListener('focus', this.fmsFocusListener);\n    }\n\n    private documentKeydownListener = (e: KeyboardEvent) => {\n        if (DEBUG) {\n            this.log('document',e);\n            console.log(e.key);\n        }\n        switch(e.key) {\n            case \"Tab\":\n                e.stopPropagation();\n                this.closeDropdown();\n                break;\n            case \"ArrowUp\":\n                e.stopPropagation();\n                e.preventDefault();\n                if (DEBUG) {\n                    console.log(\"up\");\n                }\n                this.decrementItemFocus();\n                this.focusItem();\n                break;\n            case \"ArrowDown\":\n                e.stopPropagation();\n                e.preventDefault();\n                if (DEBUG) {\n                    console.log(\"down\");\n                }\n                this.incrementItemFocus();\n                this.focusItem();\n                break;\n            case \"Enter\":\n            case \"Spacebar\":\n            case \" \":\n                //swallow to allow checkbox change to work\n                break;\n            default:\n                //send key to filter\n                this.refocusFilter();\n                break;\n        }\n    };\n\n    private incrementItemFocus(): void {\n        if (this.itemFocus >= this.options.length - 1) return; \n        let i = this.itemFocus;\n        do {\n            i++;\n        } while ((i == -1 && (this.selectAllOption.isDisabled() || this.selectAllOption.isHidden())) || //magic number\n            (i >= 0 && i < this.options.length && (this.options[i].isDisabled() || this.options[i].isHidden())));\n        this.itemFocus = i > this.options.length - 1 ? this.itemFocus : i;\n        if (DEBUG) {\n            console.log(\"item focus: \"+ this.itemFocus);\n        }\n    }\n\n    private decrementItemFocus(): void {\n        if (this.itemFocus <= -2) return; //magic number\n        let i = this.itemFocus;\n        do {\n            i--;\n            \n        } while ((i == -1 && (this.selectAllOption.isDisabled() || this.selectAllOption.isHidden())) ||\n            (i >= 0 && (this.options[i].isDisabled() || this.options[i].isHidden())) &&\n            i > -2); //magic number\n        this.itemFocus = i; \n        if (DEBUG) {\n            console.log(\"item focus: \"+ this.itemFocus);\n        }\n    }\n\n    private focusItem(): void {\n        if (this.itemFocus === -2) {\n            this.refocusFilter();\n        } else if (this.itemFocus === -1) {\n            this.selectAllOption.focus();\n        } else {\n            this.options[this.itemFocus].focus();\n        }\n    }\n\n    private documentClickListener = (e: MouseEvent) => {\n        if (DEBUG) {\n            this.log('document',e);\n        }\n        if (this.div !== e.target && !this.div.contains(<Node>e.target)) {\n            this.closeDropdown();\n        }\n    };\n\n    private fmsFocusListener: EventListener = (e: FocusEvent) => {\n        if (DEBUG) {\n            this.log('div',e);\n        }\n        e.stopPropagation();\n        e.preventDefault();\n        this.viewBar.dispatchEvent(new MouseEvent('click'));\n    };\n\n    private fmsMousedownListener: EventListener = (e: MouseEvent) => {\n        if (DEBUG) {\n            this.log('div',e);\n        }\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    private openDropdown() {\n        if (this.disabled) return;\n        if (DEBUG) {\n            console.log('open');\n        }\n        this.div.removeEventListener('mousedown', this.fmsMousedownListener, true);\n        this.div.removeEventListener('focus', this.fmsFocusListener);\n        this.dropDown.classList.add('show');\n        this.setTabIndex();\n        this.clearFilterAndRefocus();\n        document.addEventListener('keydown', this.documentKeydownListener, true);\n        document.addEventListener('click', this.documentClickListener, true);\n    }\n\n    private queueOption(option: Option): void {\n        if (this.options.indexOf(option) == -1) return;\n        this.numSelectedItems++;\n        $(this.selectedItems).append(option.getSelectedItemBadge());\n    }\n\n    private unqueueOption(option: Option): void {\n        if (this.options.indexOf(option) == -1) return;\n        this.numSelectedItems--;\n        $(this.selectedItems).children('[data-id=\"' + option.getSelectedItemBadge().getAttribute('data-id') + '\"]').remove();\n    }\n\n    private update(): void {\n        if (this.areAllSelected()) {\n            this.selectAllOption.markSelectAll();\n            this.placeholder.hidden = true;\n        } else if (this.areSomeSelected()) {\n            if (this.areOnlyDeselectedAlsoDisabled()) {\n                this.selectAllOption.markSelectAllNotDisabled();\n                this.placeholder.hidden = true;\n            } else {\n                this.selectAllOption.markSelectPartial();\n                this.placeholder.hidden = true;\n            }\n        } else {\n            this.selectAllOption.markDeselect();\n            this.placeholder.hidden = false;\n        }\n        if (this.areAllDisabled()) {\n            this.selectAllOption.disable();\n        } else {\n            this.selectAllOption.enable();\n        }\n        if (!this.canSelect()) {\n            this.options\n                .filter((o) => !o.isSelected())\n                .forEach((o) => o.deactivate());\n        } else {\n            this.options\n                .filter((o) => !o.isSelected())\n                .forEach((o) => o.activate());\n        }\n        this.updateSelectionCounter();\n    }\n\n    private areAllSelected(): boolean {\n        return this.options\n                .map((o) => o.isSelected())\n                .reduce((acc,cur) => acc && cur, true);\n    }\n\n    private areSomeSelected(): boolean {\n        return this.options\n                .map((o) => o.isSelected())\n                .reduce((acc,cur) => acc || cur, false);\n    }\n\n    private areOnlyDeselectedAlsoDisabled(): boolean {\n        return this.options\n                .filter((o) => !o.isSelected())\n                .map((o) => o.isDisabled())\n                .reduce((acc,cur) => acc && cur, true);\n    }\n\n    private areAllDisabled(): boolean {\n        return this.options\n                .map((o) => o.isDisabled())\n                .reduce((acc,cur) => acc && cur, true);\n    }\n\n    private isEnablingAndDisablingPermitted(): boolean {\n        return this.allowEnablingAndDisabling;\n    }\n\n    public getRootElement(): HTMLElement {\n        return this.div;\n    }\n\n    public hasOption(value: string): boolean {\n        return this.getOption(value) !== NULL_OPTION;\n    }\n\n    private getOption(value: string): Option {\n        for (const o of this.options) {\n            if (o.getValue() == value) {\n                return o;\n            }\n        }\n        return NULL_OPTION;\n    }\n\n    public selectOption(value: string): void {\n        if (this.isDisabled()) return;\n        this.getOption(value).select();\n    }\n\n    public deselectOption(value: string): void {\n        if (this.isDisabled()) return;\n        this.getOption(value).deselect();\n    }\n\n    public isOptionSelected(value: string): boolean {\n        return this.getOption(value).isSelected();\n    }\n\n    public enableOption(value: string): void {\n        if (!this.isEnablingAndDisablingPermitted()) return;\n        this.getOption(value).enable();\n    }\n\n    public disableOption(value: string): void {\n        if (!this.isEnablingAndDisablingPermitted()) return;\n        this.getOption(value).disable();\n    }\n\n    public isOptionDisabled(value: string): boolean {\n        return this.getOption(value).isDisabled();\n    }\n\n    public disable(): void {\n        if (!this.isEnablingAndDisablingPermitted()) return;\n        this.disableNoPermissionCheck();\n    }\n\n    private disableNoPermissionCheck(): void {\n        this.options.forEach((o) => this.setBadgeDisabled(o));\n        this.disabled = true;\n        this.div.classList.add('disabled');\n        this.viewBar.classList.remove('dropdown-toggle');\n        this.closeDropdown();\n    }\n\n    private setBadgeDisabled(o: Option):void {\n        o.getSelectedItemBadge().classList.add('disabled');\n    }\n\n    public enable(): void {\n        if (!this.isEnablingAndDisablingPermitted()) return;\n        this.options.forEach((o) => {\n            if (!o.isDisabled()) {\n                this.setBadgeEnabled(o);\n            }\n        });\n        this.disabled = false;\n        this.div.classList.remove('disabled');\n        this.setTabIndex(); \n        this.viewBar.classList.add('dropdown-toggle');\n    }\n\n    private setBadgeEnabled(o: Option):void {\n        o.getSelectedItemBadge().classList.remove('disabled');\n    }\n\n    public isDisabled(): boolean {\n        return this.disabled;\n    }\n\n    public selectAll(): void {\n        if (this.isDisabled()) return;\n        this.selectAllOption.select();\n    }\n\n    public deselectAll(): void {\n        if (this.isDisabled()) return;\n        this.selectAllOption.deselect();\n    }\n\n    private getSelectedOptions(includeDisabled = true): Array<Option> {\n        let a = this.options;\n        if (!includeDisabled) {\n            if (this.isDisabled()) {\n                return new Array();\n            }\n            a = a.filter((o) => !o.isDisabled());\n        }\n        a = a.filter((o) => o.isSelected());\n        return a;\n    }\n\n    public getSelectedOptionsAsJson(includeDisabled = true): string {\n        const data: any = {};\n        let a: Array<string> = this.getSelectedOptions(includeDisabled).map((o) => o.getValue());\n        data[this.getName()] = a;\n        let c = JSON.stringify(data, null, \"  \");\n        if (DEBUG) {\n            console.log(c);\n        }\n        return c;\n    }\n\n    public getName(): string {\n        return this.name;\n    }\n\n    private dispatchSelectedEvent(option: Option): void {\n        this.dispatchEvent(\n            FilterMultiSelect.EventType.SELECTED,\n            option.getValue(),\n            option.getLabel());\n    }\n\n    private dispatchDeselectedEvent(option: Option): void {\n        this.dispatchEvent(\n            FilterMultiSelect.EventType.DESELECTED,\n            option.getValue(),\n            option.getLabel());\n    }\n\n    private dispatchEvent(eventType: string, value: string, label: string): void {\n        let event: CustomEvent = FilterMultiSelect.createEvent(eventType, this.getName(), value, label);\n        this.viewBar.dispatchEvent(event);\n    }\n\n    private canSelect(): boolean {\n        return this.numSelectedItems < this.maxNumSelectedItems;\n    }\n\n    private updateSelectionCounter(): void {\n        this.selectionCounter.textContent = this.numSelectedItems + \"/\" + this.maxNumSelectedItems;\n    }\n}","/*! \n *  Multiple select dropdown with filter jQuery plugin.\n *  Copyright (C) 2022  Andrew Wagner  github.com/andreww1011\n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n * \n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n * \n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, write to the Free Software\n *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301\n *  USA\n */\nimport $ from 'jquery';\nimport FilterMultiSelect from './FilterMultiSelect';\n\n// define the plugin function on the jQuery extension point.\n($.fn as any).filterMultiSelect = function (this: JQuery, args: Args): any {\n    let target = this;\n    // merge the global options with the per-call options.\n    args = $.extend({}, ($.fn as any).filterMultiSelect.args, args);\n\n    // factory defaults\n    if (typeof args.placeholderText === 'undefined') args.placeholderText = 'nothing selected';\n    if (typeof args.filterText === 'undefined') args.filterText = 'Filter';\n    if (typeof args.selectAllText === 'undefined') args.selectAllText = 'Select All';\n    if (typeof args.labelText === 'undefined') args.labelText = '';\n    if (typeof args.selectionLimit === 'undefined') args.selectionLimit = 0;\n    if (typeof args.caseSensitive === 'undefined') args.caseSensitive = false;\n    if (typeof args.allowEnablingAndDisabling === 'undefined') args.allowEnablingAndDisabling = true;\n    if (typeof args.items === 'undefined') args.items = new Array();\n    \n\n    let filterMultiSelect = new FilterMultiSelect(target, args);\n  \n    const fms = $(filterMultiSelect.getRootElement());\n    target.replaceWith(fms);\n    \n    var methods = {\n        hasOption: function(value: string):boolean {\n            return filterMultiSelect.hasOption(value);\n        },\n        selectOption: function(value: string):void {\n            filterMultiSelect.selectOption(value);\n        },\n        deselectOption: function(value: string):void {\n            filterMultiSelect.deselectOption(value);\n        },\n        isOptionSelected: function(value: string):boolean {\n            return filterMultiSelect.isOptionSelected(value);\n        },\n        enableOption: function(value: string):void {\n            filterMultiSelect.enableOption(value);\n        },\n        disableOption: function(value: string):void {\n            filterMultiSelect.disableOption(value);\n        },\n        isOptionDisabled: function(value: string):boolean {\n            return filterMultiSelect.isOptionDisabled(value);\n        },\n        enable: function():void {\n            filterMultiSelect.enable();\n        },\n        disable: function():void {\n            filterMultiSelect.disable();\n        },\n        selectAll: function():void {\n            filterMultiSelect.selectAll();\n        },\n        deselectAll: function():void {\n            filterMultiSelect.deselectAll();\n        },\n        getSelectedOptionsAsJson: function(includeDisabled = true):string {\n            return filterMultiSelect.getSelectedOptionsAsJson(includeDisabled);\n        }\n    };\n\n    // store applied element\n    ($.fn as any).filterMultiSelect.applied.push(methods);\n\n    return methods;\n};\n\n// activate plugin by targeting selector\n$(function () {\n    // factory defaults\n    let selector: string = typeof ($.fn as any).filterMultiSelect.selector === 'undefined' ? 'select.filter-multi-select' : ($.fn as any).filterMultiSelect.selector;\n    // target\n    let s: JQuery<HTMLElement> = $(selector);\n    s.each((i,e) => {\n        ($(e) as any).filterMultiSelect();\n    });\n});\n\n// store collection of applied elements\n($.fn as any).filterMultiSelect.applied = new Array();\n\n// define the plugin's global default selector.\n($.fn as any).filterMultiSelect.selector = undefined;\n\n// define the plugin's global default options.\n($.fn as any).filterMultiSelect.args = {};"]}